// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vrssg {

static const char* VisionRecognitionService_method_names[] = {
  "/vrssg.VisionRecognitionService/ListMeters",
  "/vrssg.VisionRecognitionService/Recognize",
};

std::unique_ptr< VisionRecognitionService::Stub> VisionRecognitionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VisionRecognitionService::Stub> stub(new VisionRecognitionService::Stub(channel));
  return stub;
}

VisionRecognitionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListMeters_(VisionRecognitionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recognize_(VisionRecognitionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VisionRecognitionService::Stub::ListMeters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::vrssg::Meters* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListMeters_, context, request, response);
}

void VisionRecognitionService::Stub::experimental_async::ListMeters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::vrssg::Meters* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListMeters_, context, request, response, std::move(f));
}

void VisionRecognitionService::Stub::experimental_async::ListMeters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vrssg::Meters* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListMeters_, context, request, response, std::move(f));
}

void VisionRecognitionService::Stub::experimental_async::ListMeters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::vrssg::Meters* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListMeters_, context, request, response, reactor);
}

void VisionRecognitionService::Stub::experimental_async::ListMeters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vrssg::Meters* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListMeters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vrssg::Meters>* VisionRecognitionService::Stub::AsyncListMetersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrssg::Meters>::Create(channel_.get(), cq, rpcmethod_ListMeters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vrssg::Meters>* VisionRecognitionService::Stub::PrepareAsyncListMetersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrssg::Meters>::Create(channel_.get(), cq, rpcmethod_ListMeters_, context, request, false);
}

::grpc::Status VisionRecognitionService::Stub::Recognize(::grpc::ClientContext* context, const ::vrssg::Input& request, ::vrssg::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Recognize_, context, request, response);
}

void VisionRecognitionService::Stub::experimental_async::Recognize(::grpc::ClientContext* context, const ::vrssg::Input* request, ::vrssg::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recognize_, context, request, response, std::move(f));
}

void VisionRecognitionService::Stub::experimental_async::Recognize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vrssg::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recognize_, context, request, response, std::move(f));
}

void VisionRecognitionService::Stub::experimental_async::Recognize(::grpc::ClientContext* context, const ::vrssg::Input* request, ::vrssg::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recognize_, context, request, response, reactor);
}

void VisionRecognitionService::Stub::experimental_async::Recognize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vrssg::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recognize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vrssg::Result>* VisionRecognitionService::Stub::AsyncRecognizeRaw(::grpc::ClientContext* context, const ::vrssg::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrssg::Result>::Create(channel_.get(), cq, rpcmethod_Recognize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vrssg::Result>* VisionRecognitionService::Stub::PrepareAsyncRecognizeRaw(::grpc::ClientContext* context, const ::vrssg::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrssg::Result>::Create(channel_.get(), cq, rpcmethod_Recognize_, context, request, false);
}

VisionRecognitionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisionRecognitionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisionRecognitionService::Service, ::google::protobuf::Empty, ::vrssg::Meters>(
          [](VisionRecognitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::vrssg::Meters* resp) {
               return service->ListMeters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VisionRecognitionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VisionRecognitionService::Service, ::vrssg::Input, ::vrssg::Result>(
          [](VisionRecognitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vrssg::Input* req,
             ::vrssg::Result* resp) {
               return service->Recognize(ctx, req, resp);
             }, this)));
}

VisionRecognitionService::Service::~Service() {
}

::grpc::Status VisionRecognitionService::Service::ListMeters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::vrssg::Meters* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VisionRecognitionService::Service::Recognize(::grpc::ServerContext* context, const ::vrssg::Input* request, ::vrssg::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vrssg



