// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace vrssg {
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Meter;
class MeterDefaultTypeInternal;
extern MeterDefaultTypeInternal _Meter_default_instance_;
class MeterResult;
class MeterResultDefaultTypeInternal;
extern MeterResultDefaultTypeInternal _MeterResult_default_instance_;
class MeterResults;
class MeterResultsDefaultTypeInternal;
extern MeterResultsDefaultTypeInternal _MeterResults_default_instance_;
class MeterValue;
class MeterValueDefaultTypeInternal;
extern MeterValueDefaultTypeInternal _MeterValue_default_instance_;
class Meters;
class MetersDefaultTypeInternal;
extern MetersDefaultTypeInternal _Meters_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SwitchResult;
class SwitchResultDefaultTypeInternal;
extern SwitchResultDefaultTypeInternal _SwitchResult_default_instance_;
class SwitchResults;
class SwitchResultsDefaultTypeInternal;
extern SwitchResultsDefaultTypeInternal _SwitchResults_default_instance_;
}  // namespace vrssg
PROTOBUF_NAMESPACE_OPEN
template<> ::vrssg::Input* Arena::CreateMaybeMessage<::vrssg::Input>(Arena*);
template<> ::vrssg::Meter* Arena::CreateMaybeMessage<::vrssg::Meter>(Arena*);
template<> ::vrssg::MeterResult* Arena::CreateMaybeMessage<::vrssg::MeterResult>(Arena*);
template<> ::vrssg::MeterResults* Arena::CreateMaybeMessage<::vrssg::MeterResults>(Arena*);
template<> ::vrssg::MeterValue* Arena::CreateMaybeMessage<::vrssg::MeterValue>(Arena*);
template<> ::vrssg::Meters* Arena::CreateMaybeMessage<::vrssg::Meters>(Arena*);
template<> ::vrssg::Point* Arena::CreateMaybeMessage<::vrssg::Point>(Arena*);
template<> ::vrssg::Rectangle* Arena::CreateMaybeMessage<::vrssg::Rectangle>(Arena*);
template<> ::vrssg::Result* Arena::CreateMaybeMessage<::vrssg::Result>(Arena*);
template<> ::vrssg::SwitchResult* Arena::CreateMaybeMessage<::vrssg::SwitchResult>(Arena*);
template<> ::vrssg::SwitchResults* Arena::CreateMaybeMessage<::vrssg::SwitchResults>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vrssg {

enum ErrorCode : int {
  ERROR_SUCCESS = 0,
  ERROR_FAILED = 1,
  ERROR_ALREADY_IN_RECOGNIZING = 2,
  ERROR_INVALID_INPUT_IMAGE_DATA = 3,
  ERROR_INVALID_INPUT_MODEL_NAME = 4,
  ERROR_TARGET_NOT_FOUND = 5,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = ERROR_SUCCESS;
constexpr ErrorCode ErrorCode_MAX = ERROR_TARGET_NOT_FOUND;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum SwitchStatus : int {
  SWITCH_STATUS_UNKOWN = 0,
  SWITCH_STATUS_ON = 1,
  SWITCH_STATUS_OFF = 2,
  SwitchStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SwitchStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SwitchStatus_IsValid(int value);
constexpr SwitchStatus SwitchStatus_MIN = SWITCH_STATUS_UNKOWN;
constexpr SwitchStatus SwitchStatus_MAX = SWITCH_STATUS_OFF;
constexpr int SwitchStatus_ARRAYSIZE = SwitchStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwitchStatus_descriptor();
template<typename T>
inline const std::string& SwitchStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwitchStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwitchStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SwitchStatus_descriptor(), enum_t_value);
}
inline bool SwitchStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SwitchStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SwitchStatus>(
    SwitchStatus_descriptor(), name, value);
}
// ===================================================================

class Meters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.Meters) */ {
 public:
  inline Meters() : Meters(nullptr) {}
  virtual ~Meters();

  Meters(const Meters& from);
  Meters(Meters&& from) noexcept
    : Meters() {
    *this = ::std::move(from);
  }

  inline Meters& operator=(const Meters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meters& operator=(Meters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Meters* internal_default_instance() {
    return reinterpret_cast<const Meters*>(
               &_Meters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Meters& a, Meters& b) {
    a.Swap(&b);
  }
  inline void Swap(Meters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meters* New() const final {
    return CreateMaybeMessage<Meters>(nullptr);
  }

  Meters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meters& from);
  void MergeFrom(const Meters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.Meters";
  }
  protected:
  explicit Meters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeterFieldNumber = 1,
  };
  // repeated .vrssg.Meter meter = 1;
  int meter_size() const;
  private:
  int _internal_meter_size() const;
  public:
  void clear_meter();
  ::vrssg::Meter* mutable_meter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::Meter >*
      mutable_meter();
  private:
  const ::vrssg::Meter& _internal_meter(int index) const;
  ::vrssg::Meter* _internal_add_meter();
  public:
  const ::vrssg::Meter& meter(int index) const;
  ::vrssg::Meter* add_meter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::Meter >&
      meter() const;

  // @@protoc_insertion_point(class_scope:vrssg.Meters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::Meter > meter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Meter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.Meter) */ {
 public:
  inline Meter() : Meter(nullptr) {}
  virtual ~Meter();

  Meter(const Meter& from);
  Meter(Meter&& from) noexcept
    : Meter() {
    *this = ::std::move(from);
  }

  inline Meter& operator=(const Meter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meter& operator=(Meter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Meter* internal_default_instance() {
    return reinterpret_cast<const Meter*>(
               &_Meter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Meter& a, Meter& b) {
    a.Swap(&b);
  }
  inline void Swap(Meter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meter* New() const final {
    return CreateMaybeMessage<Meter>(nullptr);
  }

  Meter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meter& from);
  void MergeFrom(const Meter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.Meter";
  }
  protected:
  explicit Meter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kImageFieldNumber = 2,
    kCommentsFieldNumber = 3,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string comments = 3;
  void clear_comments();
  const std::string& comments() const;
  void set_comments(const std::string& value);
  void set_comments(std::string&& value);
  void set_comments(const char* value);
  void set_comments(const char* value, size_t size);
  std::string* mutable_comments();
  std::string* release_comments();
  void set_allocated_comments(std::string* comments);
  private:
  const std::string& _internal_comments() const;
  void _internal_set_comments(const std::string& value);
  std::string* _internal_mutable_comments();
  public:

  // @@protoc_insertion_point(class_scope:vrssg.Meter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:vrssg.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Rectangle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.Rectangle) */ {
 public:
  inline Rectangle() : Rectangle(nullptr) {}
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.Rectangle";
  }
  protected:
  explicit Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 left = 1;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 top = 2;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::int32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vrssg.Rectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SwitchResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.SwitchResult) */ {
 public:
  inline SwitchResult() : SwitchResult(nullptr) {}
  virtual ~SwitchResult();

  SwitchResult(const SwitchResult& from);
  SwitchResult(SwitchResult&& from) noexcept
    : SwitchResult() {
    *this = ::std::move(from);
  }

  inline SwitchResult& operator=(const SwitchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchResult& operator=(SwitchResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchResult* internal_default_instance() {
    return reinterpret_cast<const SwitchResult*>(
               &_SwitchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SwitchResult& a, SwitchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwitchResult* New() const final {
    return CreateMaybeMessage<SwitchResult>(nullptr);
  }

  SwitchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchResult& from);
  void MergeFrom(const SwitchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.SwitchResult";
  }
  protected:
  explicit SwitchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRectFieldNumber = 2,
    kStatusFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .vrssg.Rectangle rect = 2;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::vrssg::Rectangle& rect() const;
  ::vrssg::Rectangle* release_rect();
  ::vrssg::Rectangle* mutable_rect();
  void set_allocated_rect(::vrssg::Rectangle* rect);
  private:
  const ::vrssg::Rectangle& _internal_rect() const;
  ::vrssg::Rectangle* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::vrssg::Rectangle* rect);
  ::vrssg::Rectangle* unsafe_arena_release_rect();

  // .vrssg.SwitchStatus status = 3;
  void clear_status();
  ::vrssg::SwitchStatus status() const;
  void set_status(::vrssg::SwitchStatus value);
  private:
  ::vrssg::SwitchStatus _internal_status() const;
  void _internal_set_status(::vrssg::SwitchStatus value);
  public:

  // float score = 4;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:vrssg.SwitchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::vrssg::Rectangle* rect_;
  int status_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class SwitchResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.SwitchResults) */ {
 public:
  inline SwitchResults() : SwitchResults(nullptr) {}
  virtual ~SwitchResults();

  SwitchResults(const SwitchResults& from);
  SwitchResults(SwitchResults&& from) noexcept
    : SwitchResults() {
    *this = ::std::move(from);
  }

  inline SwitchResults& operator=(const SwitchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchResults& operator=(SwitchResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchResults* internal_default_instance() {
    return reinterpret_cast<const SwitchResults*>(
               &_SwitchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SwitchResults& a, SwitchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwitchResults* New() const final {
    return CreateMaybeMessage<SwitchResults>(nullptr);
  }

  SwitchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchResults& from);
  void MergeFrom(const SwitchResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.SwitchResults";
  }
  protected:
  explicit SwitchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .vrssg.SwitchResult results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::vrssg::SwitchResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::SwitchResult >*
      mutable_results();
  private:
  const ::vrssg::SwitchResult& _internal_results(int index) const;
  ::vrssg::SwitchResult* _internal_add_results();
  public:
  const ::vrssg::SwitchResult& results(int index) const;
  ::vrssg::SwitchResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::SwitchResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:vrssg.SwitchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::SwitchResult > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vrssg.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MeterValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.MeterValue) */ {
 public:
  inline MeterValue() : MeterValue(nullptr) {}
  virtual ~MeterValue();

  MeterValue(const MeterValue& from);
  MeterValue(MeterValue&& from) noexcept
    : MeterValue() {
    *this = ::std::move(from);
  }

  inline MeterValue& operator=(const MeterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeterValue& operator=(MeterValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeterValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeterValue* internal_default_instance() {
    return reinterpret_cast<const MeterValue*>(
               &_MeterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MeterValue& a, MeterValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MeterValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeterValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeterValue* New() const final {
    return CreateMaybeMessage<MeterValue>(nullptr);
  }

  MeterValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeterValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeterValue& from);
  void MergeFrom(const MeterValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeterValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.MeterValue";
  }
  protected:
  explicit MeterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kValueFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .vrssg.Point pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::vrssg::Point& pos() const;
  ::vrssg::Point* release_pos();
  ::vrssg::Point* mutable_pos();
  void set_allocated_pos(::vrssg::Point* pos);
  private:
  const ::vrssg::Point& _internal_pos() const;
  ::vrssg::Point* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::vrssg::Point* pos);
  ::vrssg::Point* unsafe_arena_release_pos();

  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vrssg.MeterValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vrssg::Point* pos_;
  float value_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MeterResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.MeterResult) */ {
 public:
  inline MeterResult() : MeterResult(nullptr) {}
  virtual ~MeterResult();

  MeterResult(const MeterResult& from);
  MeterResult(MeterResult&& from) noexcept
    : MeterResult() {
    *this = ::std::move(from);
  }

  inline MeterResult& operator=(const MeterResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeterResult& operator=(MeterResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeterResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeterResult* internal_default_instance() {
    return reinterpret_cast<const MeterResult*>(
               &_MeterResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MeterResult& a, MeterResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MeterResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeterResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeterResult* New() const final {
    return CreateMaybeMessage<MeterResult>(nullptr);
  }

  MeterResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeterResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeterResult& from);
  void MergeFrom(const MeterResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeterResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.MeterResult";
  }
  protected:
  explicit MeterResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
    kRectFieldNumber = 2,
    kScoreFieldNumber = 4,
    kCategoryFieldNumber = 5,
  };
  // repeated .vrssg.MeterValue value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::vrssg::MeterValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterValue >*
      mutable_value();
  private:
  const ::vrssg::MeterValue& _internal_value(int index) const;
  ::vrssg::MeterValue* _internal_add_value();
  public:
  const ::vrssg::MeterValue& value(int index) const;
  ::vrssg::MeterValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterValue >&
      value() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .vrssg.Rectangle rect = 2;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::vrssg::Rectangle& rect() const;
  ::vrssg::Rectangle* release_rect();
  ::vrssg::Rectangle* mutable_rect();
  void set_allocated_rect(::vrssg::Rectangle* rect);
  private:
  const ::vrssg::Rectangle& _internal_rect() const;
  ::vrssg::Rectangle* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::vrssg::Rectangle* rect);
  ::vrssg::Rectangle* unsafe_arena_release_rect();

  // float score = 4;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // int32 category = 5;
  void clear_category();
  ::PROTOBUF_NAMESPACE_ID::int32 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_category() const;
  void _internal_set_category(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vrssg.MeterResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterValue > value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::vrssg::Rectangle* rect_;
  float score_;
  ::PROTOBUF_NAMESPACE_ID::int32 category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MeterResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.MeterResults) */ {
 public:
  inline MeterResults() : MeterResults(nullptr) {}
  virtual ~MeterResults();

  MeterResults(const MeterResults& from);
  MeterResults(MeterResults&& from) noexcept
    : MeterResults() {
    *this = ::std::move(from);
  }

  inline MeterResults& operator=(const MeterResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeterResults& operator=(MeterResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeterResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeterResults* internal_default_instance() {
    return reinterpret_cast<const MeterResults*>(
               &_MeterResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MeterResults& a, MeterResults& b) {
    a.Swap(&b);
  }
  inline void Swap(MeterResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeterResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeterResults* New() const final {
    return CreateMaybeMessage<MeterResults>(nullptr);
  }

  MeterResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeterResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeterResults& from);
  void MergeFrom(const MeterResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeterResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.MeterResults";
  }
  protected:
  explicit MeterResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .vrssg.MeterResult results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::vrssg::MeterResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterResult >*
      mutable_results();
  private:
  const ::vrssg::MeterResult& _internal_results(int index) const;
  ::vrssg::MeterResult* _internal_add_results();
  public:
  const ::vrssg::MeterResult& results(int index) const;
  ::vrssg::MeterResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:vrssg.MeterResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterResult > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vrssg.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  enum ShotCase {
    kSwitchResults = 2,
    kMeterResults = 3,
    SHOT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vrssg.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCodeFieldNumber = 4,
    kSwitchResultsFieldNumber = 2,
    kMeterResultsFieldNumber = 3,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .vrssg.ErrorCode code = 4;
  void clear_code();
  ::vrssg::ErrorCode code() const;
  void set_code(::vrssg::ErrorCode value);
  private:
  ::vrssg::ErrorCode _internal_code() const;
  void _internal_set_code(::vrssg::ErrorCode value);
  public:

  // .vrssg.SwitchResults switch_results = 2;
  bool has_switch_results() const;
  private:
  bool _internal_has_switch_results() const;
  public:
  void clear_switch_results();
  const ::vrssg::SwitchResults& switch_results() const;
  ::vrssg::SwitchResults* release_switch_results();
  ::vrssg::SwitchResults* mutable_switch_results();
  void set_allocated_switch_results(::vrssg::SwitchResults* switch_results);
  private:
  const ::vrssg::SwitchResults& _internal_switch_results() const;
  ::vrssg::SwitchResults* _internal_mutable_switch_results();
  public:
  void unsafe_arena_set_allocated_switch_results(
      ::vrssg::SwitchResults* switch_results);
  ::vrssg::SwitchResults* unsafe_arena_release_switch_results();

  // .vrssg.MeterResults meter_results = 3;
  bool has_meter_results() const;
  private:
  bool _internal_has_meter_results() const;
  public:
  void clear_meter_results();
  const ::vrssg::MeterResults& meter_results() const;
  ::vrssg::MeterResults* release_meter_results();
  ::vrssg::MeterResults* mutable_meter_results();
  void set_allocated_meter_results(::vrssg::MeterResults* meter_results);
  private:
  const ::vrssg::MeterResults& _internal_meter_results() const;
  ::vrssg::MeterResults* _internal_mutable_meter_results();
  public:
  void unsafe_arena_set_allocated_meter_results(
      ::vrssg::MeterResults* meter_results);
  ::vrssg::MeterResults* unsafe_arena_release_meter_results();

  void clear_shot();
  ShotCase shot_case() const;
  // @@protoc_insertion_point(class_scope:vrssg.Result)
 private:
  class _Internal;
  void set_has_switch_results();
  void set_has_meter_results();

  inline bool has_shot() const;
  inline void clear_has_shot();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  int code_;
  union ShotUnion {
    ShotUnion() {}
    ::vrssg::SwitchResults* switch_results_;
    ::vrssg::MeterResults* meter_results_;
  } shot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Meters

// repeated .vrssg.Meter meter = 1;
inline int Meters::_internal_meter_size() const {
  return meter_.size();
}
inline int Meters::meter_size() const {
  return _internal_meter_size();
}
inline void Meters::clear_meter() {
  meter_.Clear();
}
inline ::vrssg::Meter* Meters::mutable_meter(int index) {
  // @@protoc_insertion_point(field_mutable:vrssg.Meters.meter)
  return meter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::Meter >*
Meters::mutable_meter() {
  // @@protoc_insertion_point(field_mutable_list:vrssg.Meters.meter)
  return &meter_;
}
inline const ::vrssg::Meter& Meters::_internal_meter(int index) const {
  return meter_.Get(index);
}
inline const ::vrssg::Meter& Meters::meter(int index) const {
  // @@protoc_insertion_point(field_get:vrssg.Meters.meter)
  return _internal_meter(index);
}
inline ::vrssg::Meter* Meters::_internal_add_meter() {
  return meter_.Add();
}
inline ::vrssg::Meter* Meters::add_meter() {
  // @@protoc_insertion_point(field_add:vrssg.Meters.meter)
  return _internal_add_meter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::Meter >&
Meters::meter() const {
  // @@protoc_insertion_point(field_list:vrssg.Meters.meter)
  return meter_;
}

// -------------------------------------------------------------------

// Meter

// string model = 1;
inline void Meter::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Meter::model() const {
  // @@protoc_insertion_point(field_get:vrssg.Meter.model)
  return _internal_model();
}
inline void Meter::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:vrssg.Meter.model)
}
inline std::string* Meter::mutable_model() {
  // @@protoc_insertion_point(field_mutable:vrssg.Meter.model)
  return _internal_mutable_model();
}
inline const std::string& Meter::_internal_model() const {
  return model_.Get();
}
inline void Meter::_internal_set_model(const std::string& value) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Meter::set_model(std::string&& value) {
  
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vrssg.Meter.model)
}
inline void Meter::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vrssg.Meter.model)
}
inline void Meter::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vrssg.Meter.model)
}
inline std::string* Meter::_internal_mutable_model() {
  
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Meter::release_model() {
  // @@protoc_insertion_point(field_release:vrssg.Meter.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meter::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vrssg.Meter.model)
}

// bytes image = 2;
inline void Meter::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Meter::image() const {
  // @@protoc_insertion_point(field_get:vrssg.Meter.image)
  return _internal_image();
}
inline void Meter::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:vrssg.Meter.image)
}
inline std::string* Meter::mutable_image() {
  // @@protoc_insertion_point(field_mutable:vrssg.Meter.image)
  return _internal_mutable_image();
}
inline const std::string& Meter::_internal_image() const {
  return image_.Get();
}
inline void Meter::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Meter::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vrssg.Meter.image)
}
inline void Meter::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vrssg.Meter.image)
}
inline void Meter::set_image(const void* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vrssg.Meter.image)
}
inline std::string* Meter::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Meter::release_image() {
  // @@protoc_insertion_point(field_release:vrssg.Meter.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meter::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vrssg.Meter.image)
}

// string comments = 3;
inline void Meter::clear_comments() {
  comments_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Meter::comments() const {
  // @@protoc_insertion_point(field_get:vrssg.Meter.comments)
  return _internal_comments();
}
inline void Meter::set_comments(const std::string& value) {
  _internal_set_comments(value);
  // @@protoc_insertion_point(field_set:vrssg.Meter.comments)
}
inline std::string* Meter::mutable_comments() {
  // @@protoc_insertion_point(field_mutable:vrssg.Meter.comments)
  return _internal_mutable_comments();
}
inline const std::string& Meter::_internal_comments() const {
  return comments_.Get();
}
inline void Meter::_internal_set_comments(const std::string& value) {
  
  comments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Meter::set_comments(std::string&& value) {
  
  comments_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vrssg.Meter.comments)
}
inline void Meter::set_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vrssg.Meter.comments)
}
inline void Meter::set_comments(const char* value,
    size_t size) {
  
  comments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vrssg.Meter.comments)
}
inline std::string* Meter::_internal_mutable_comments() {
  
  return comments_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Meter::release_comments() {
  // @@protoc_insertion_point(field_release:vrssg.Meter.comments)
  return comments_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meter::set_allocated_comments(std::string* comments) {
  if (comments != nullptr) {
    
  } else {
    
  }
  comments_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comments,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vrssg.Meter.comments)
}

// -------------------------------------------------------------------

// Input

// string model = 1;
inline void Input::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Input::model() const {
  // @@protoc_insertion_point(field_get:vrssg.Input.model)
  return _internal_model();
}
inline void Input::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:vrssg.Input.model)
}
inline std::string* Input::mutable_model() {
  // @@protoc_insertion_point(field_mutable:vrssg.Input.model)
  return _internal_mutable_model();
}
inline const std::string& Input::_internal_model() const {
  return model_.Get();
}
inline void Input::_internal_set_model(const std::string& value) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Input::set_model(std::string&& value) {
  
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vrssg.Input.model)
}
inline void Input::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vrssg.Input.model)
}
inline void Input::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vrssg.Input.model)
}
inline std::string* Input::_internal_mutable_model() {
  
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Input::release_model() {
  // @@protoc_insertion_point(field_release:vrssg.Input.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Input::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vrssg.Input.model)
}

// bytes image = 2;
inline void Input::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Input::image() const {
  // @@protoc_insertion_point(field_get:vrssg.Input.image)
  return _internal_image();
}
inline void Input::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:vrssg.Input.image)
}
inline std::string* Input::mutable_image() {
  // @@protoc_insertion_point(field_mutable:vrssg.Input.image)
  return _internal_mutable_image();
}
inline const std::string& Input::_internal_image() const {
  return image_.Get();
}
inline void Input::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Input::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vrssg.Input.image)
}
inline void Input::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vrssg.Input.image)
}
inline void Input::set_image(const void* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vrssg.Input.image)
}
inline std::string* Input::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Input::release_image() {
  // @@protoc_insertion_point(field_release:vrssg.Input.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Input::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vrssg.Input.image)
}

// -------------------------------------------------------------------

// Rectangle

// int32 left = 1;
inline void Rectangle::clear_left() {
  left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::left() const {
  // @@protoc_insertion_point(field_get:vrssg.Rectangle.left)
  return _internal_left();
}
inline void Rectangle::_internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_ = value;
}
inline void Rectangle::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:vrssg.Rectangle.left)
}

// int32 top = 2;
inline void Rectangle::clear_top() {
  top_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::top() const {
  // @@protoc_insertion_point(field_get:vrssg.Rectangle.top)
  return _internal_top();
}
inline void Rectangle::_internal_set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  top_ = value;
}
inline void Rectangle::set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:vrssg.Rectangle.top)
}

// int32 width = 3;
inline void Rectangle::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::width() const {
  // @@protoc_insertion_point(field_get:vrssg.Rectangle.width)
  return _internal_width();
}
inline void Rectangle::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Rectangle::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:vrssg.Rectangle.width)
}

// int32 height = 4;
inline void Rectangle::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::height() const {
  // @@protoc_insertion_point(field_get:vrssg.Rectangle.height)
  return _internal_height();
}
inline void Rectangle::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Rectangle::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:vrssg.Rectangle.height)
}

// -------------------------------------------------------------------

// SwitchResult

// string id = 1;
inline void SwitchResult::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwitchResult::id() const {
  // @@protoc_insertion_point(field_get:vrssg.SwitchResult.id)
  return _internal_id();
}
inline void SwitchResult::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vrssg.SwitchResult.id)
}
inline std::string* SwitchResult::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vrssg.SwitchResult.id)
  return _internal_mutable_id();
}
inline const std::string& SwitchResult::_internal_id() const {
  return id_.Get();
}
inline void SwitchResult::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwitchResult::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vrssg.SwitchResult.id)
}
inline void SwitchResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vrssg.SwitchResult.id)
}
inline void SwitchResult::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vrssg.SwitchResult.id)
}
inline std::string* SwitchResult::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwitchResult::release_id() {
  // @@protoc_insertion_point(field_release:vrssg.SwitchResult.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwitchResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vrssg.SwitchResult.id)
}

// .vrssg.Rectangle rect = 2;
inline bool SwitchResult::_internal_has_rect() const {
  return this != internal_default_instance() && rect_ != nullptr;
}
inline bool SwitchResult::has_rect() const {
  return _internal_has_rect();
}
inline void SwitchResult::clear_rect() {
  if (GetArena() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
}
inline const ::vrssg::Rectangle& SwitchResult::_internal_rect() const {
  const ::vrssg::Rectangle* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vrssg::Rectangle*>(
      &::vrssg::_Rectangle_default_instance_);
}
inline const ::vrssg::Rectangle& SwitchResult::rect() const {
  // @@protoc_insertion_point(field_get:vrssg.SwitchResult.rect)
  return _internal_rect();
}
inline void SwitchResult::unsafe_arena_set_allocated_rect(
    ::vrssg::Rectangle* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrssg.SwitchResult.rect)
}
inline ::vrssg::Rectangle* SwitchResult::release_rect() {
  
  ::vrssg::Rectangle* temp = rect_;
  rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vrssg::Rectangle* SwitchResult::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:vrssg.SwitchResult.rect)
  
  ::vrssg::Rectangle* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::vrssg::Rectangle* SwitchResult::_internal_mutable_rect() {
  
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::vrssg::Rectangle>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::vrssg::Rectangle* SwitchResult::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:vrssg.SwitchResult.rect)
  return _internal_mutable_rect();
}
inline void SwitchResult::set_allocated_rect(::vrssg::Rectangle* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:vrssg.SwitchResult.rect)
}

// .vrssg.SwitchStatus status = 3;
inline void SwitchResult::clear_status() {
  status_ = 0;
}
inline ::vrssg::SwitchStatus SwitchResult::_internal_status() const {
  return static_cast< ::vrssg::SwitchStatus >(status_);
}
inline ::vrssg::SwitchStatus SwitchResult::status() const {
  // @@protoc_insertion_point(field_get:vrssg.SwitchResult.status)
  return _internal_status();
}
inline void SwitchResult::_internal_set_status(::vrssg::SwitchStatus value) {
  
  status_ = value;
}
inline void SwitchResult::set_status(::vrssg::SwitchStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vrssg.SwitchResult.status)
}

// float score = 4;
inline void SwitchResult::clear_score() {
  score_ = 0;
}
inline float SwitchResult::_internal_score() const {
  return score_;
}
inline float SwitchResult::score() const {
  // @@protoc_insertion_point(field_get:vrssg.SwitchResult.score)
  return _internal_score();
}
inline void SwitchResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void SwitchResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:vrssg.SwitchResult.score)
}

// -------------------------------------------------------------------

// SwitchResults

// repeated .vrssg.SwitchResult results = 1;
inline int SwitchResults::_internal_results_size() const {
  return results_.size();
}
inline int SwitchResults::results_size() const {
  return _internal_results_size();
}
inline void SwitchResults::clear_results() {
  results_.Clear();
}
inline ::vrssg::SwitchResult* SwitchResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:vrssg.SwitchResults.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::SwitchResult >*
SwitchResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:vrssg.SwitchResults.results)
  return &results_;
}
inline const ::vrssg::SwitchResult& SwitchResults::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::vrssg::SwitchResult& SwitchResults::results(int index) const {
  // @@protoc_insertion_point(field_get:vrssg.SwitchResults.results)
  return _internal_results(index);
}
inline ::vrssg::SwitchResult* SwitchResults::_internal_add_results() {
  return results_.Add();
}
inline ::vrssg::SwitchResult* SwitchResults::add_results() {
  // @@protoc_insertion_point(field_add:vrssg.SwitchResults.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::SwitchResult >&
SwitchResults::results() const {
  // @@protoc_insertion_point(field_list:vrssg.SwitchResults.results)
  return results_;
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:vrssg.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Point::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:vrssg.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:vrssg.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Point::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:vrssg.Point.y)
}

// -------------------------------------------------------------------

// MeterValue

// float value = 1;
inline void MeterValue::clear_value() {
  value_ = 0;
}
inline float MeterValue::_internal_value() const {
  return value_;
}
inline float MeterValue::value() const {
  // @@protoc_insertion_point(field_get:vrssg.MeterValue.value)
  return _internal_value();
}
inline void MeterValue::_internal_set_value(float value) {
  
  value_ = value;
}
inline void MeterValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vrssg.MeterValue.value)
}

// int32 id = 2;
inline void MeterValue::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeterValue::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeterValue::id() const {
  // @@protoc_insertion_point(field_get:vrssg.MeterValue.id)
  return _internal_id();
}
inline void MeterValue::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void MeterValue::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vrssg.MeterValue.id)
}

// .vrssg.Point pos = 3;
inline bool MeterValue::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool MeterValue::has_pos() const {
  return _internal_has_pos();
}
inline void MeterValue::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::vrssg::Point& MeterValue::_internal_pos() const {
  const ::vrssg::Point* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vrssg::Point*>(
      &::vrssg::_Point_default_instance_);
}
inline const ::vrssg::Point& MeterValue::pos() const {
  // @@protoc_insertion_point(field_get:vrssg.MeterValue.pos)
  return _internal_pos();
}
inline void MeterValue::unsafe_arena_set_allocated_pos(
    ::vrssg::Point* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrssg.MeterValue.pos)
}
inline ::vrssg::Point* MeterValue::release_pos() {
  
  ::vrssg::Point* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vrssg::Point* MeterValue::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:vrssg.MeterValue.pos)
  
  ::vrssg::Point* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::vrssg::Point* MeterValue::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::vrssg::Point>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::vrssg::Point* MeterValue::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:vrssg.MeterValue.pos)
  return _internal_mutable_pos();
}
inline void MeterValue::set_allocated_pos(::vrssg::Point* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:vrssg.MeterValue.pos)
}

// -------------------------------------------------------------------

// MeterResult

// string id = 1;
inline void MeterResult::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeterResult::id() const {
  // @@protoc_insertion_point(field_get:vrssg.MeterResult.id)
  return _internal_id();
}
inline void MeterResult::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vrssg.MeterResult.id)
}
inline std::string* MeterResult::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vrssg.MeterResult.id)
  return _internal_mutable_id();
}
inline const std::string& MeterResult::_internal_id() const {
  return id_.Get();
}
inline void MeterResult::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeterResult::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vrssg.MeterResult.id)
}
inline void MeterResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vrssg.MeterResult.id)
}
inline void MeterResult::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vrssg.MeterResult.id)
}
inline std::string* MeterResult::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeterResult::release_id() {
  // @@protoc_insertion_point(field_release:vrssg.MeterResult.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeterResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vrssg.MeterResult.id)
}

// .vrssg.Rectangle rect = 2;
inline bool MeterResult::_internal_has_rect() const {
  return this != internal_default_instance() && rect_ != nullptr;
}
inline bool MeterResult::has_rect() const {
  return _internal_has_rect();
}
inline void MeterResult::clear_rect() {
  if (GetArena() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
}
inline const ::vrssg::Rectangle& MeterResult::_internal_rect() const {
  const ::vrssg::Rectangle* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vrssg::Rectangle*>(
      &::vrssg::_Rectangle_default_instance_);
}
inline const ::vrssg::Rectangle& MeterResult::rect() const {
  // @@protoc_insertion_point(field_get:vrssg.MeterResult.rect)
  return _internal_rect();
}
inline void MeterResult::unsafe_arena_set_allocated_rect(
    ::vrssg::Rectangle* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrssg.MeterResult.rect)
}
inline ::vrssg::Rectangle* MeterResult::release_rect() {
  
  ::vrssg::Rectangle* temp = rect_;
  rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vrssg::Rectangle* MeterResult::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:vrssg.MeterResult.rect)
  
  ::vrssg::Rectangle* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::vrssg::Rectangle* MeterResult::_internal_mutable_rect() {
  
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::vrssg::Rectangle>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::vrssg::Rectangle* MeterResult::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:vrssg.MeterResult.rect)
  return _internal_mutable_rect();
}
inline void MeterResult::set_allocated_rect(::vrssg::Rectangle* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:vrssg.MeterResult.rect)
}

// repeated .vrssg.MeterValue value = 3;
inline int MeterResult::_internal_value_size() const {
  return value_.size();
}
inline int MeterResult::value_size() const {
  return _internal_value_size();
}
inline void MeterResult::clear_value() {
  value_.Clear();
}
inline ::vrssg::MeterValue* MeterResult::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:vrssg.MeterResult.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterValue >*
MeterResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:vrssg.MeterResult.value)
  return &value_;
}
inline const ::vrssg::MeterValue& MeterResult::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::vrssg::MeterValue& MeterResult::value(int index) const {
  // @@protoc_insertion_point(field_get:vrssg.MeterResult.value)
  return _internal_value(index);
}
inline ::vrssg::MeterValue* MeterResult::_internal_add_value() {
  return value_.Add();
}
inline ::vrssg::MeterValue* MeterResult::add_value() {
  // @@protoc_insertion_point(field_add:vrssg.MeterResult.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterValue >&
MeterResult::value() const {
  // @@protoc_insertion_point(field_list:vrssg.MeterResult.value)
  return value_;
}

// float score = 4;
inline void MeterResult::clear_score() {
  score_ = 0;
}
inline float MeterResult::_internal_score() const {
  return score_;
}
inline float MeterResult::score() const {
  // @@protoc_insertion_point(field_get:vrssg.MeterResult.score)
  return _internal_score();
}
inline void MeterResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void MeterResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:vrssg.MeterResult.score)
}

// int32 category = 5;
inline void MeterResult::clear_category() {
  category_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeterResult::_internal_category() const {
  return category_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeterResult::category() const {
  // @@protoc_insertion_point(field_get:vrssg.MeterResult.category)
  return _internal_category();
}
inline void MeterResult::_internal_set_category(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  category_ = value;
}
inline void MeterResult::set_category(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:vrssg.MeterResult.category)
}

// -------------------------------------------------------------------

// MeterResults

// repeated .vrssg.MeterResult results = 1;
inline int MeterResults::_internal_results_size() const {
  return results_.size();
}
inline int MeterResults::results_size() const {
  return _internal_results_size();
}
inline void MeterResults::clear_results() {
  results_.Clear();
}
inline ::vrssg::MeterResult* MeterResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:vrssg.MeterResults.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterResult >*
MeterResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:vrssg.MeterResults.results)
  return &results_;
}
inline const ::vrssg::MeterResult& MeterResults::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::vrssg::MeterResult& MeterResults::results(int index) const {
  // @@protoc_insertion_point(field_get:vrssg.MeterResults.results)
  return _internal_results(index);
}
inline ::vrssg::MeterResult* MeterResults::_internal_add_results() {
  return results_.Add();
}
inline ::vrssg::MeterResult* MeterResults::add_results() {
  // @@protoc_insertion_point(field_add:vrssg.MeterResults.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vrssg::MeterResult >&
MeterResults::results() const {
  // @@protoc_insertion_point(field_list:vrssg.MeterResults.results)
  return results_;
}

// -------------------------------------------------------------------

// Result

// int32 type = 1;
inline void Result::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::type() const {
  // @@protoc_insertion_point(field_get:vrssg.Result.type)
  return _internal_type();
}
inline void Result::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Result::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vrssg.Result.type)
}

// .vrssg.SwitchResults switch_results = 2;
inline bool Result::_internal_has_switch_results() const {
  return shot_case() == kSwitchResults;
}
inline bool Result::has_switch_results() const {
  return _internal_has_switch_results();
}
inline void Result::set_has_switch_results() {
  _oneof_case_[0] = kSwitchResults;
}
inline void Result::clear_switch_results() {
  if (_internal_has_switch_results()) {
    if (GetArena() == nullptr) {
      delete shot_.switch_results_;
    }
    clear_has_shot();
  }
}
inline ::vrssg::SwitchResults* Result::release_switch_results() {
  // @@protoc_insertion_point(field_release:vrssg.Result.switch_results)
  if (_internal_has_switch_results()) {
    clear_has_shot();
      ::vrssg::SwitchResults* temp = shot_.switch_results_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shot_.switch_results_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vrssg::SwitchResults& Result::_internal_switch_results() const {
  return _internal_has_switch_results()
      ? *shot_.switch_results_
      : *reinterpret_cast< ::vrssg::SwitchResults*>(&::vrssg::_SwitchResults_default_instance_);
}
inline const ::vrssg::SwitchResults& Result::switch_results() const {
  // @@protoc_insertion_point(field_get:vrssg.Result.switch_results)
  return _internal_switch_results();
}
inline ::vrssg::SwitchResults* Result::unsafe_arena_release_switch_results() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vrssg.Result.switch_results)
  if (_internal_has_switch_results()) {
    clear_has_shot();
    ::vrssg::SwitchResults* temp = shot_.switch_results_;
    shot_.switch_results_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Result::unsafe_arena_set_allocated_switch_results(::vrssg::SwitchResults* switch_results) {
  clear_shot();
  if (switch_results) {
    set_has_switch_results();
    shot_.switch_results_ = switch_results;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrssg.Result.switch_results)
}
inline ::vrssg::SwitchResults* Result::_internal_mutable_switch_results() {
  if (!_internal_has_switch_results()) {
    clear_shot();
    set_has_switch_results();
    shot_.switch_results_ = CreateMaybeMessage< ::vrssg::SwitchResults >(GetArena());
  }
  return shot_.switch_results_;
}
inline ::vrssg::SwitchResults* Result::mutable_switch_results() {
  // @@protoc_insertion_point(field_mutable:vrssg.Result.switch_results)
  return _internal_mutable_switch_results();
}

// .vrssg.MeterResults meter_results = 3;
inline bool Result::_internal_has_meter_results() const {
  return shot_case() == kMeterResults;
}
inline bool Result::has_meter_results() const {
  return _internal_has_meter_results();
}
inline void Result::set_has_meter_results() {
  _oneof_case_[0] = kMeterResults;
}
inline void Result::clear_meter_results() {
  if (_internal_has_meter_results()) {
    if (GetArena() == nullptr) {
      delete shot_.meter_results_;
    }
    clear_has_shot();
  }
}
inline ::vrssg::MeterResults* Result::release_meter_results() {
  // @@protoc_insertion_point(field_release:vrssg.Result.meter_results)
  if (_internal_has_meter_results()) {
    clear_has_shot();
      ::vrssg::MeterResults* temp = shot_.meter_results_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shot_.meter_results_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vrssg::MeterResults& Result::_internal_meter_results() const {
  return _internal_has_meter_results()
      ? *shot_.meter_results_
      : *reinterpret_cast< ::vrssg::MeterResults*>(&::vrssg::_MeterResults_default_instance_);
}
inline const ::vrssg::MeterResults& Result::meter_results() const {
  // @@protoc_insertion_point(field_get:vrssg.Result.meter_results)
  return _internal_meter_results();
}
inline ::vrssg::MeterResults* Result::unsafe_arena_release_meter_results() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vrssg.Result.meter_results)
  if (_internal_has_meter_results()) {
    clear_has_shot();
    ::vrssg::MeterResults* temp = shot_.meter_results_;
    shot_.meter_results_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Result::unsafe_arena_set_allocated_meter_results(::vrssg::MeterResults* meter_results) {
  clear_shot();
  if (meter_results) {
    set_has_meter_results();
    shot_.meter_results_ = meter_results;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vrssg.Result.meter_results)
}
inline ::vrssg::MeterResults* Result::_internal_mutable_meter_results() {
  if (!_internal_has_meter_results()) {
    clear_shot();
    set_has_meter_results();
    shot_.meter_results_ = CreateMaybeMessage< ::vrssg::MeterResults >(GetArena());
  }
  return shot_.meter_results_;
}
inline ::vrssg::MeterResults* Result::mutable_meter_results() {
  // @@protoc_insertion_point(field_mutable:vrssg.Result.meter_results)
  return _internal_mutable_meter_results();
}

// .vrssg.ErrorCode code = 4;
inline void Result::clear_code() {
  code_ = 0;
}
inline ::vrssg::ErrorCode Result::_internal_code() const {
  return static_cast< ::vrssg::ErrorCode >(code_);
}
inline ::vrssg::ErrorCode Result::code() const {
  // @@protoc_insertion_point(field_get:vrssg.Result.code)
  return _internal_code();
}
inline void Result::_internal_set_code(::vrssg::ErrorCode value) {
  
  code_ = value;
}
inline void Result::set_code(::vrssg::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:vrssg.Result.code)
}

inline bool Result::has_shot() const {
  return shot_case() != SHOT_NOT_SET;
}
inline void Result::clear_has_shot() {
  _oneof_case_[0] = SHOT_NOT_SET;
}
inline Result::ShotCase Result::shot_case() const {
  return Result::ShotCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vrssg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vrssg::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vrssg::ErrorCode>() {
  return ::vrssg::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::vrssg::SwitchStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vrssg::SwitchStatus>() {
  return ::vrssg::SwitchStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
